// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baidubce/baiducloud-cce-csi-driver/pkg/cloud (interfaces: CDSVolumeService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	cloud "github.com/baidubce/baiducloud-cce-csi-driver/pkg/cloud"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCDSVolumeService is a mock of CDSVolumeService interface
type MockCDSVolumeService struct {
	ctrl     *gomock.Controller
	recorder *MockCDSVolumeServiceMockRecorder
}

// MockCDSVolumeServiceMockRecorder is the mock recorder for MockCDSVolumeService
type MockCDSVolumeServiceMockRecorder struct {
	mock *MockCDSVolumeService
}

// NewMockCDSVolumeService creates a new mock instance
func NewMockCDSVolumeService(ctrl *gomock.Controller) *MockCDSVolumeService {
	mock := &MockCDSVolumeService{ctrl: ctrl}
	mock.recorder = &MockCDSVolumeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCDSVolumeService) EXPECT() *MockCDSVolumeServiceMockRecorder {
	return m.recorder
}

// CreateVolume mocks base method
func (m *MockCDSVolumeService) CreateVolume(arg0 context.Context, arg1 *cloud.CreateCDSVolumeArgs, arg2 cloud.Auth) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume
func (mr *MockCDSVolumeServiceMockRecorder) CreateVolume(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockCDSVolumeService)(nil).CreateVolume), arg0, arg1, arg2)
}

// GetVolumeByID mocks base method
func (m *MockCDSVolumeService) GetVolumeByID(arg0 context.Context, arg1 string, arg2 cloud.Auth) (cloud.CDSVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(cloud.CDSVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeByID indicates an expected call of GetVolumeByID
func (mr *MockCDSVolumeServiceMockRecorder) GetVolumeByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeByID", reflect.TypeOf((*MockCDSVolumeService)(nil).GetVolumeByID), arg0, arg1, arg2)
}

// GetVolumeByName mocks base method
func (m *MockCDSVolumeService) GetVolumeByName(arg0 context.Context, arg1 string, arg2 cloud.Auth) (cloud.CDSVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(cloud.CDSVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeByName indicates an expected call of GetVolumeByName
func (mr *MockCDSVolumeServiceMockRecorder) GetVolumeByName(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeByName", reflect.TypeOf((*MockCDSVolumeService)(nil).GetVolumeByName), arg0, arg1, arg2)
}
