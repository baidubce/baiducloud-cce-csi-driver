// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/baidubce/baiducloud-cce-csi-driver/pkg/cloud (interfaces: CDSVolume)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	cloud "github.com/baidubce/baiducloud-cce-csi-driver/pkg/cloud"
	api "github.com/baidubce/bce-sdk-go/services/bcc/api"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCDSVolume is a mock of CDSVolume interface
type MockCDSVolume struct {
	ctrl     *gomock.Controller
	recorder *MockCDSVolumeMockRecorder
}

// MockCDSVolumeMockRecorder is the mock recorder for MockCDSVolume
type MockCDSVolumeMockRecorder struct {
	mock *MockCDSVolume
}

// NewMockCDSVolume creates a new mock instance
func NewMockCDSVolume(ctrl *gomock.Controller) *MockCDSVolume {
	mock := &MockCDSVolume{ctrl: ctrl}
	mock.recorder = &MockCDSVolumeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCDSVolume) EXPECT() *MockCDSVolumeMockRecorder {
	return m.recorder
}

// Attach mocks base method
func (m *MockCDSVolume) Attach(arg0 context.Context, arg1 string) (*api.VolumeAttachmentModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Attach", arg0, arg1)
	ret0, _ := ret[0].(*api.VolumeAttachmentModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Attach indicates an expected call of Attach
func (mr *MockCDSVolumeMockRecorder) Attach(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Attach", reflect.TypeOf((*MockCDSVolume)(nil).Attach), arg0, arg1)
}

// Delete mocks base method
func (m *MockCDSVolume) Delete(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockCDSVolumeMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCDSVolume)(nil).Delete), arg0)
}

// Detach mocks base method
func (m *MockCDSVolume) Detach(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detach", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Detach indicates an expected call of Detach
func (mr *MockCDSVolumeMockRecorder) Detach(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detach", reflect.TypeOf((*MockCDSVolume)(nil).Detach), arg0, arg1)
}

// Detail mocks base method
func (m *MockCDSVolume) Detail() *api.VolumeModel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Detail")
	ret0, _ := ret[0].(*api.VolumeModel)
	return ret0
}

// Detail indicates an expected call of Detail
func (mr *MockCDSVolumeMockRecorder) Detail() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Detail", reflect.TypeOf((*MockCDSVolume)(nil).Detail))
}

// ID mocks base method
func (m *MockCDSVolume) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockCDSVolumeMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockCDSVolume)(nil).ID))
}

// IsAttached mocks base method
func (m *MockCDSVolume) IsAttached() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAttached")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAttached indicates an expected call of IsAttached
func (mr *MockCDSVolumeMockRecorder) IsAttached() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAttached", reflect.TypeOf((*MockCDSVolume)(nil).IsAttached))
}

// IsAttaching mocks base method
func (m *MockCDSVolume) IsAttaching() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAttaching")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAttaching indicates an expected call of IsAttaching
func (mr *MockCDSVolumeMockRecorder) IsAttaching() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAttaching", reflect.TypeOf((*MockCDSVolume)(nil).IsAttaching))
}

// IsAvailable mocks base method
func (m *MockCDSVolume) IsAvailable() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAvailable")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAvailable indicates an expected call of IsAvailable
func (mr *MockCDSVolumeMockRecorder) IsAvailable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAvailable", reflect.TypeOf((*MockCDSVolume)(nil).IsAvailable))
}

// IsCreating mocks base method
func (m *MockCDSVolume) IsCreating() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCreating")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCreating indicates an expected call of IsCreating
func (mr *MockCDSVolumeMockRecorder) IsCreating() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCreating", reflect.TypeOf((*MockCDSVolume)(nil).IsCreating))
}

// IsDetaching mocks base method
func (m *MockCDSVolume) IsDetaching() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDetaching")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDetaching indicates an expected call of IsDetaching
func (mr *MockCDSVolumeMockRecorder) IsDetaching() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDetaching", reflect.TypeOf((*MockCDSVolume)(nil).IsDetaching))
}

// IsInUse mocks base method
func (m *MockCDSVolume) IsInUse() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInUse")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInUse indicates an expected call of IsInUse
func (mr *MockCDSVolumeMockRecorder) IsInUse() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInUse", reflect.TypeOf((*MockCDSVolume)(nil).IsInUse))
}

// IsScaling mocks base method
func (m *MockCDSVolume) IsScaling() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsScaling")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsScaling indicates an expected call of IsScaling
func (mr *MockCDSVolumeMockRecorder) IsScaling() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsScaling", reflect.TypeOf((*MockCDSVolume)(nil).IsScaling))
}

// Resize mocks base method
func (m *MockCDSVolume) Resize(arg0 context.Context, arg1 *cloud.ResizeCSDVolumeArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resize", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Resize indicates an expected call of Resize
func (mr *MockCDSVolumeMockRecorder) Resize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resize", reflect.TypeOf((*MockCDSVolume)(nil).Resize), arg0, arg1)
}

// SizeGB mocks base method
func (m *MockCDSVolume) SizeGB() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SizeGB")
	ret0, _ := ret[0].(int)
	return ret0
}

// SizeGB indicates an expected call of SizeGB
func (mr *MockCDSVolumeMockRecorder) SizeGB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SizeGB", reflect.TypeOf((*MockCDSVolume)(nil).SizeGB))
}

// Zone mocks base method
func (m *MockCDSVolume) Zone() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Zone")
	ret0, _ := ret[0].(string)
	return ret0
}

// Zone indicates an expected call of Zone
func (mr *MockCDSVolumeMockRecorder) Zone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Zone", reflect.TypeOf((*MockCDSVolume)(nil).Zone))
}
