// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/driver/bos/mount.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMounter is a mock of Mounter interface
type MockMounter struct {
	ctrl     *gomock.Controller
	recorder *MockMounterMockRecorder
}

// MockMounterMockRecorder is the mock recorder for MockMounter
type MockMounterMockRecorder struct {
	mock *MockMounter
}

// NewMockMounter creates a new mock instance
func NewMockMounter(ctrl *gomock.Controller) *MockMounter {
	mock := &MockMounter{ctrl: ctrl}
	mock.recorder = &MockMounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMounter) EXPECT() *MockMounterMockRecorder {
	return m.recorder
}

// PathExists mocks base method
func (m *MockMounter) PathExists(ctx context.Context, path string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PathExists", ctx, path)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PathExists indicates an expected call of PathExists
func (mr *MockMounterMockRecorder) PathExists(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathExists", reflect.TypeOf((*MockMounter)(nil).PathExists), ctx, path)
}

// MkdirAll mocks base method
func (m *MockMounter) MkdirAll(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll
func (mr *MockMounterMockRecorder) MkdirAll(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockMounter)(nil).MkdirAll), ctx, path)
}

// MakeFile mocks base method
func (m *MockMounter) MakeFile(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeFile", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeFile indicates an expected call of MakeFile
func (mr *MockMounterMockRecorder) MakeFile(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeFile", reflect.TypeOf((*MockMounter)(nil).MakeFile), ctx, path)
}

// WriteFile mocks base method
func (m *MockMounter) WriteFile(ctx context.Context, path string, content []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", ctx, path, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile
func (mr *MockMounterMockRecorder) WriteFile(ctx, path, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockMounter)(nil).WriteFile), ctx, path, content)
}

// RemovePath mocks base method
func (m *MockMounter) RemovePath(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePath", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePath indicates an expected call of RemovePath
func (mr *MockMounterMockRecorder) RemovePath(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePath", reflect.TypeOf((*MockMounter)(nil).RemovePath), ctx, path)
}

// RemoveAll mocks base method
func (m *MockMounter) RemoveAll(ctx context.Context, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", ctx, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll
func (mr *MockMounterMockRecorder) RemoveAll(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockMounter)(nil).RemoveAll), ctx, path)
}

// MountByBOSFS mocks base method
func (m *MockMounter) MountByBOSFS(ctx context.Context, source, target string, options, sensitiveOptions []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MountByBOSFS", ctx, source, target, options, sensitiveOptions)
	ret0, _ := ret[0].(error)
	return ret0
}

// MountByBOSFS indicates an expected call of MountByBOSFS
func (mr *MockMounterMockRecorder) MountByBOSFS(ctx, source, target, options, sensitiveOptions interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MountByBOSFS", reflect.TypeOf((*MockMounter)(nil).MountByBOSFS), ctx, source, target, options, sensitiveOptions)
}

// UnmountFromBOSFS mocks base method
func (m *MockMounter) UnmountFromBOSFS(ctx context.Context, target string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmountFromBOSFS", ctx, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmountFromBOSFS indicates an expected call of UnmountFromBOSFS
func (mr *MockMounterMockRecorder) UnmountFromBOSFS(ctx, target interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmountFromBOSFS", reflect.TypeOf((*MockMounter)(nil).UnmountFromBOSFS), ctx, target)
}
