kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: csi-bosplugin-node-server
  namespace: kube-system
spec:
  selector:
    matchLabels:
      app: csi-bosplugin-node-server
  template:
    metadata:
      labels:
        app: csi-bosplugin-node-server
    spec:
      serviceAccount: csi-bos-external-runner
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-node-critical
      containers:
        - name: node-driver-registrar
          image: {{ .Values.image.registrar }}
          args:
            - "--csi-address=$(ADDRESS)"
            - "--kubelet-registration-path=$(ADDRESS)"
            - "--v={{ .Values.logLevel }}"
          env:
            - name: ADDRESS
              value: {{ .Values.kubeletDataDirPath }}/plugins/{{ .Values.driverName }}/csi.sock
          imagePullPolicy: "Always"
          volumeMounts:
            - name: reg-dir
              mountPath: /registration
            - name: kubelet-dir
              mountPath: {{ .Values.kubeletDataDirPath }}
        - name: csi-bosplugin
          securityContext:
            privileged: true
            capabilities:
              add: ["SYS_ADMIN"]
            allowPrivilegeEscalation: true
          image: {{ .Values.image.plugin }}
          args :
            - "--override-driver-name={{ .Values.driverName }}"
            - "--driver-type=bos"
            - "--csi-endpoint=$(CSI_ENDPOINT)"
            - "--driver-mode=node"
            - "--auth-mode=key"
            - "--max-volumes-per-node={{ .Values.maxVolumesPerNode }}"
            {{- if .Values.region }}
            - "--region={{ .Values.region }}"
            {{- end }}
            {{- if .Values.endpoint.bos }}
            - "--bos-endpoint={{ .Values.endpoint.bos }}"
            {{- end }}
            {{- if .Values.image.bosfs }}
            - "--bosfs-image={{ .Values.image.bosfs }}"
            {{- end }}
            - "--logtostderr"
            - "--v={{ .Values.logLevel }}"
          env:
            - name: CSI_ENDPOINT
              value: unix:/{{ .Values.kubeletDataDirPath }}/plugins/{{ .Values.driverName }}/csi.sock
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          imagePullPolicy: "Always"
          volumeMounts:
            - name: kubelet-dir
              mountPath: {{ .Values.kubeletDataDirPath }}
              mountPropagation: "Bidirectional"
            - name: host-sys
              mountPath: /sys
              mountPropagation: "HostToContainer"
            - name: docker-sock
              mountPath: /var/run/docker.sock
            - name: bosfs-cred-dir
              mountPath: /etc/bosfs/credentials
      volumes:
        - name: kubelet-dir
          hostPath:
            path: {{ .Values.kubeletDataDirPath }}
            type: DirectoryOrCreate
        - name: reg-dir
          hostPath:
            path: {{ .Values.kubeletDataDirPath }}/plugins_registry
            type: DirectoryOrCreate
        - name: host-sys
          hostPath:
            path: /sys
        - name: docker-sock
          hostPath:
            path: {{ .Values.dockerSocketPath }}
            type: File
        - name: bosfs-cred-dir
          hostPath:
            path: /etc/bosfs/credentials
            type: DirectoryOrCreate
